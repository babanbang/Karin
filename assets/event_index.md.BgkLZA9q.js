import{_ as e,c as a,o as t,a3 as o}from"./chunks/framework.BqNSDv7K.js";const b=JSON.parse('{"title":"事件","description":"","frontmatter":{},"headers":[],"relativePath":"event/index.md","filePath":"event/index.md"}'),r={name:"event/index.md"},i=o('<h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><hr><h2 id="事件概述" tabindex="-1">事件概述 <a class="header-anchor" href="#事件概述" aria-label="Permalink to &quot;事件概述&quot;">​</a></h2><blockquote><p>事件是一段上报，上报也可以由插件主动触发<br> 例如插件向适配器发送请求，适配器返回结果时触发上报<br> 在大多数协议端中，事件上报基本上是通过 <code>HTTP</code>、<code>WebSocket</code>通信实现的<br> 而在karin，使用了<code>kritor</code>标准，新增了一种<code>gRPC</code>协议进行通信</p></blockquote><h2 id="消息事件" tabindex="-1">消息事件 <a class="header-anchor" href="#消息事件" aria-label="Permalink to &quot;消息事件&quot;">​</a></h2><ul><li><a href="./message.html">消息事件</a></li></ul><h2 id="通知事件" tabindex="-1">通知事件 <a class="header-anchor" href="#通知事件" aria-label="Permalink to &quot;通知事件&quot;">​</a></h2><ul><li><a href="./notice.html">通知事件</a></li></ul><h2 id="请求事件" tabindex="-1">请求事件 <a class="header-anchor" href="#请求事件" aria-label="Permalink to &quot;请求事件&quot;">​</a></h2><ul><li><a href="./request.html">请求事件</a></li></ul>',10),l=[i];function n(c,d,h,s,_,u){return t(),a("div",null,l)}const f=e(r,[["render",n]]);export{b as __pageData,f as default};
